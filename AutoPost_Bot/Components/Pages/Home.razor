@page "/"
@using AutoPost_Bot.BotRepo
@using System.Text.RegularExpressions
@using AutoPost_Bot.Models
@using AutoPost_Bot.PostsRepository
@using AutoPost_Bot.TelegramGroupsRepo
@rendermode InteractiveServer
@inject IBotService BotService
@inject IJSRuntime JS
@inject IPostsRepo PostsRepo
@inject IGroupRepo GroupRepo;

@*TODO: Добавить кнопку обновления списка постов*@

<PageTitle>Home</PageTitle>

<h1>Настройка бота</h1>
<div class="main_container">
    <div class="input-group mb-3">
        <button class="btn btn-outline-secondary"
        type="button"
        id="button-addon1"
        @onclick="ToggleBot">
            @(BotService.IsBotActive() ? "Остановить бота" : "Запустить бота")
        </button>
        <input type="text"
        class="form-control @(hasError ? "is-invalid" : "")"
        placeholder = "Введите токен бота"
        aria-label="Bot Token input form"
        aria-describedby="button-addon1"
        @bind="botToken" />
    </div>
    @if (hasError)
    {
        <div class="text-danger">Ошибка: @errorMessage</div>
    }
    @if (hasStatus)
    {
        <div class="text-success">@statusMessage</div>
    }
    <div class="post_container">
        <h1>Настройка авто-постинга</h1>
        @if (!posts.Any())
        {
            <p>Постов для публикации еще нет</p>
        }
        else
        {
            <p>Постов для публикации: @posts.Count</p>
        }
        @for (int i = 0; i < posts.Count; i++)
        {
            var datetimePickerId = $"datetimepicker-publication-{i}";

            <div class="input-group mb-3">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @(posts[i].GroupID != 0 ? groups[posts[i].GroupID] : "Выберите канал или группу")
                </button>                <ul class="dropdown-menu">
                    @foreach (var group in groups)
                    {
                        <li><a class="dropdown-item" href="#" @onclick="() => SelectGroup(i, group.Key)">@group.Value</a></li>
                    }
                </ul>
                <div class="form-floating mb-3 w-100">
                    <textarea class="form-control" style="height: 150px;" @bind="posts[i].PostText" placeholder="Введите текст поста"></textarea>
                    <label>Текст поста</label>
                </div>
            </div>
            <div class="position-relative">
                <div class="input-group mb-3" id="@datetimePickerId">
                    <span class="input-group-text">Дата публикации</span>
                    <input type="text"
                    class="form-control"
                    data-td-target="#@datetimePickerId"
                    @bind="posts[i].PostDateTime" />

                    <span class="input-group-text"
                    data-td-toggle="datetimepicker"
                    data-td-target="#@datetimePickerId">
                        <i class="bi bi-calendar-event"></i>
                    </span>
                </div>
            </div>
            <div class="input-group mb-3">
                <input type="number" class="form-control" placeholder="0" @bind="posts[i].RepeatDays" min="0">
                <span class="input-group-text">дней</span>

                <input type="number" class="form-control" placeholder="0" @bind="posts[i].RepeatHours" min="0" max="23">
                <span class="input-group-text">часов</span>

                <input type="number" class="form-control" placeholder="0" @bind="posts[i].RepeatMinutes" min="0" max="59">
                <span class="input-group-text">минут</span>
            </div>
        }
        <div class="save_button_container">
            <button type="button" class="btn btn-primary btn-lg">
                Сохранить изменения
            </button>
        </div>
        <div class="add_button_container">
            <button type="button" class="btn btn-primary btn-lg"
            @onclick="AddPost">
                Добавить пост
            </button>
        </div>
    </div>

</div>

@code {
    private string botToken = String.Empty;
    private bool hasError = false;
    private bool hasStatus = false;
    private string errorMessage = "";
    private string statusMessage = "";
    private List<PostModel> posts = new();
    private Dictionary<long, string>? groups;

    protected override async Task OnInitializedAsync()
    {
        posts = await PostsRepo.GetPostsAsync();
        groups = await GroupRepo.GetAllGroupsAsync();
        botToken = BotService.GetBotToken();
    }

    private async Task ToggleBot()
    {
        hasError = false;
        errorMessage = "";
        string pattern = @"^(?:\w+):(?:[\w:]+)";

        if (BotService.IsBotActive())
        {
            try
            {
                await BotService.StopBot();
                hasError = false;
                statusMessage = "Бот успешно остановлен!";
            }
            catch (Exception ex)
            {
                hasStatus = false;
                hasError = true;
                errorMessage = ex.Message;
            }
        }
        else
        {
            try
            {
                if (!Regex.IsMatch(botToken, pattern))
                {
                    hasError = true;
                    hasStatus = false;
                    errorMessage = "Неверный формат токена";
                    return;
                }

                await BotService.StartBot(botToken);
                hasStatus = true;
                hasError = false;
                statusMessage = "Бот успешно запущен!";
            }
            catch (Exception ex)
            {
                hasStatus = false;
                hasError = true;
                errorMessage = ex.Message;
            }
        }

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var pickerIds = posts.Select((_, i) => $"datetimepicker-publication-{i}").ToList();
        await JS.InvokeVoidAsync("initDatePickers", pickerIds);
    }

    private void SelectGroup(int postIndex, long groupId)
    {
        posts[postIndex].GroupID = groupId;
        StateHasChanged();
    }

    private void AddPost(MouseEventArgs args)
    {
        posts.Add(new PostModel
            {
                PostText = "",
                PostDateTime = DateTime.Now,
                RepeatDays = 0,
                RepeatHours = 0,
                RepeatMinutes = 0
            });

        StateHasChanged();
    }
}
