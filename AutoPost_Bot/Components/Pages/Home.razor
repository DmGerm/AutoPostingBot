@page "/"
@using AutoPost_Bot.BotRepo
@using System.Text.RegularExpressions
@using AutoPost_Bot.Models
@using AutoPost_Bot.PostsRepository
@using AutoPost_Bot.TelegramGroupsRepo
@using System.Globalization
@rendermode InteractiveServer
@inject IBotService BotService
@inject IJSRuntime JS
@inject IPostsRepo PostsRepo
@inject IGroupRepo GroupRepo
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Настройка бота</h1>
<div class="row">
    <div class="col-md-5 col-12 ">
        <div class="input-group mb-3">
            <button class="btn btn-outline-secondary"
            type="button"
            id="button-addon1"
            @onclick="ToggleBot">
                @(BotService.IsBotActive() ? "Остановить бота" : "Запустить бота")
            </button>
            <input type="text"
            class="form-control @(hasError ? "is-invalid" : "")"
            placeholder="Введите токен бота"
            aria-label="Bot Token input form"
            aria-describedby="button-addon1"
            @bind="botToken" />
        </div>

        @if (hasError)
        {
            <div class="text-danger mb-3">Ошибка: @errorMessage</div>
        }
        @if (hasStatus)
        {
            <div class="text-success mb-3">@statusMessage</div>
        }

        <div class="post_container">
            <h1>Настройка авто-постинга</h1>

            @if (!posts.Any())
            {
                <p>Постов для публикации еще нет</p>
            }
            else
            {
                <p>Постов для публикации: @posts.Count</p>
            }

            @foreach (var post in posts)
            {
                <div class="post-item mb-4" @key="post.Id">
                    <div class="dropdown mb-3">
                        <button class="btn btn-outline-secondary dropdown-toggle"
                        type="button"
                        data-bs-toggle="dropdown"
                        aria-expanded="false">
                            @GetGroupName(post.GroupID)
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var group in groups)
                            {
                                <li>
                                    <a class="dropdown-item"
                                    href="#"
                                    @onclick="(() => SelectGroup(post, group.Key))">
                                        @group.Value
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>

                    <div class="form-floating mb-3">
                        <textarea class="form-control post-textarea"
                        @bind="post.PostText"
                        placeholder="Введите текст поста"></textarea>
                        <label>Текст поста</label>
                    </div>

                    <div class="form-floating mb-3">
                        <input type="datetime-local" class="form-control"
                        id="datetimeInput"
                        @bind="post.PostDateTime"
                        @bind:format="yyyy-MM-ddTHH:mm" />
                        <label for="datetimeInput">Дата и время публикации</label>
                    </div>

                    <div class="d-flex flex-column">
                        <label class="form-label mb-1">Выберите частоту повторения</label>
                        <div class="input-group d-flex gap-3 mb-3 mt-0">
                            <div class="form-floating">
                                <input type="number"
                                class="form-control"
                                id="repeatDays"
                                placeholder="0"
                                min="0"
                                @bind="post.RepeatDays" />
                                <label for="repeatDays">Дней</label>
                            </div>
                            <div class="form-floating">
                                <input type="number"
                                class="form-control"
                                id="repeatHours"
                                placeholder="0"
                                min="0"
                                max="23"
                                @bind="post.RepeatHours" />
                                <label for="repeatHours">Часов</label>
                            </div>
                            <div class="form-floating">
                                <input type="number"
                                class="form-control"
                                id="repeatMinutes"
                                placeholder="0"
                                min="0"
                                max="59"
                                @bind="post.RepeatMinutes" />
                                <label for="repeatMinutes">Минут</label>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="d-flex gap-3">
                <button type="button"
                class="btn btn-primary"
                @onclick="SaveChanges">
                    Сохранить изменения
                </button>

                <button type="button"
                class="btn btn-success"
                @onclick="AddPost">
                    Добавить пост
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string botToken = string.Empty;
    private bool hasError;
    private bool hasStatus;
    private string errorMessage = string.Empty;
    private string statusMessage = string.Empty;
    private List<PostModel> posts = new();
    private Dictionary<long, string> groups = new();
    private bool isDisposed;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await PostsRepo.GetPostsAsync() ?? new List<PostModel>();
            botToken = BotService.GetBotToken();
            await LoadGroups();
            GroupRepo.StateChanged += OnGroupRepoChanged;
        }
        catch (Exception ex)
        {
            HandleError("Ошибка инициализации: " + ex.Message);
        }
    }

    private async Task LoadGroups()
    {
        try
        {
            var groupsResult = await GroupRepo.GetAllGroupsAsync();
            groups = groupsResult?.ToDictionary(g => g.Key, g => g.Value) ?? new();
        }
        catch (Exception ex)
        {
            HandleError("Ошибка загрузки групп: " + ex.Message);
        }
    }

    private string GetGroupName(long groupId)
    {
        if (groupId == 0) return "Выберите канал или группу";
        return groups.TryGetValue(groupId, out var name)
            ? name
            : "Группа не найдена";
    }

    private async Task ToggleBot()
    {
        hasError = false;
        hasStatus = false;

        try
        {
            if (BotService.IsBotActive())
            {
                await BotService.StopBot();
                ShowStatus("Бот успешно остановлен!");
            }
            else
            {
                if (!ValidateBotToken())
                    return;

                await BotService.StartBot(botToken);
                ShowStatus("Бот успешно запущен!");
            }
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
        }
    }

    private bool ValidateBotToken()
    {
        const string pattern = @"^(?:\w+):(?:[\w:]+)";
        if (Regex.IsMatch(botToken, pattern))
            return true;

        HandleError("Неверный формат токена");
        return false;
    }

    private void SelectGroup(PostModel post, long groupId)
    {
        post.GroupID = groupId;
        StateHasChanged();
    }

    private void AddPost()
    {
        posts.Add(new PostModel
            {
                Id = Guid.NewGuid(),
                PostText = string.Empty,
                PostDateTime = DateTime.Now,
                RepeatDays = 0,
                RepeatHours = 0,
                RepeatMinutes = 0
            });

        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        try
        {
            await PostsRepo.SavePostChangesAsync(posts);
            ShowStatus("Изменения успешно сохранены!");
        }
        catch (Exception ex)
        {
            HandleError("Ошибка сохранения: " + ex.Message);
        }
    }

    private void HandleError(string message)
    {
        hasError = true;
        errorMessage = message;
        hasStatus = false;
        StateHasChanged();
    }

    private void ShowStatus(string message)
    {
        hasStatus = true;
        statusMessage = message;
        hasError = false;
        StateHasChanged();
    }

    private async void OnGroupRepoChanged()
    {
        await InvokeAsync(async () =>
        {
            await LoadGroups();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        if (!isDisposed)
        {
            GroupRepo.StateChanged -= OnGroupRepoChanged;
            isDisposed = true;
        }
    }
}