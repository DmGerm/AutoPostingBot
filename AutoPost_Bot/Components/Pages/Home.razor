@page "/"
@rendermode InteractiveServer
@inject IBotService BotService
@inject IPostsRepo PostsRepo
@inject IGroupRepo GroupRepo
@using System.Text.RegularExpressions
@using AutoPost_Bot.BotRepo
@using AutoPost_Bot.Models
@using AutoPost_Bot.PostsRepository
@using AutoPost_Bot.TelegramGroupsRepo
@using Microsoft.AspNetCore.Authorization
@implements IDisposable
@attribute [Authorize]

<PageTitle>Home</PageTitle>

<h1>Настройка бота</h1>
        <div class="input-group mb-3">
            <button class="btn btn-outline-secondary"
                    type="button"
                    id="button-addon1"
                    @onclick="ToggleBot">
                @(BotService.IsBotActive() ? "Остановить бота" : "Запустить бота")
            </button>
            <input type="text"
                   class="form-control @(_hasError ? "is-invalid" : "")"
                   placeholder="Введите токен бота"
                   aria-label="Bot Token input form"
                   aria-describedby="button-addon1"
                   @bind="_botToken"/>
        </div>

        @if (_hasError)
        {
            <div class="text-danger mb-3">Ошибка: @_errorMessage</div>
        }
        @if (_hasStatus)
        {
            <div class="text-success mb-3">@_statusMessage</div>
        }
        @if (BotService.IsBotActive())
        {
            <div class="post_container">
                <h1>Настройка авто-постинга</h1>

                @if (!_posts.Any())
                {
                    <p>Постов для публикации еще нет</p>
                }
                else
                {
                    <p>Постов для публикации: @_posts.Count</p>
                }

                @foreach (var post in _posts)
                {
                    <div class="post-item mb-4" @key="post.Id">
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle mb-3"
                                    type="button"
                                    data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                @GetGroupName(post.GroupID)
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var group in _groups)
                                {
                                    <li>
                                        <a class="dropdown-item"
                                           href="#"
                                           @onclick="() => SelectGroup(post, group.Key)">
                                            @group.Value
                                        </a>
                                    </li>
                                }
                            </ul>
                            <button type="button" class="btn btn-danger mb-3 ms-sm-3"
                                    @onclick="() => RemovePost(post)"
                            >Удалить пост
                            </button>
                        </div>

                        <div class="form-floating mb-3">
                            <textarea class="form-control post-textarea"
                                      @bind="post.PostText"
                                      placeholder="Введите текст поста"></textarea>
                            <label>Текст поста</label>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="datetime-local" class="form-control"
                                   id="datetimeInput"
                                   @bind="post.PostDateTime"/>
                            <label for="datetimeInput">Дата и время публикации</label>
                        </div>

                        <div class="d-flex flex-column">
                            <label class="form-label mb-1">Выберите частоту повторения</label>
                            <div class="input-group d-flex gap-3 mb-3 mt-0">
                                <div class="form-floating">
                                    <input type="number"
                                           class="form-control"
                                           id="repeatDays"
                                           placeholder="0"
                                           min="0"
                                           @bind="post.RepeatDays"/>
                                    <label for="repeatDays">Дней</label>
                                </div>
                                <div class="form-floating">
                                    <input type="number"
                                           class="form-control"
                                           id="repeatHours"
                                           placeholder="0"
                                           min="0"
                                           max="23"
                                           @bind="post.RepeatHours"/>
                                    <label for="repeatHours">Часов</label>
                                </div>
                                <div class="form-floating">
                                    <input type="number"
                                           class="form-control"
                                           id="repeatMinutes"
                                           placeholder="0"
                                           min="0"
                                           max="59"
                                           @bind="post.RepeatMinutes"/>
                                    <label for="repeatMinutes">Минут</label>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex flex-column">
                            <label class="form-label mb-1">Выберите дни повторения</label>

                            <div class="btn-group btn-group-sm" role="group" aria-label="Repeat days checkboxes">
                                <input type="checkbox" class="btn-check" id="btncheck1" autocomplete="off">
                                <label class="btn btn-outline-primary" for="btncheck1">Пн</label>

                                <input type="checkbox" class="btn-check" id="btncheck2" autocomplete="off">
                                <label class="btn btn-outline-primary" for="btncheck2">Вт</label>

                                <input type="checkbox"
                                       class="btn-check"
                                       id="btncheck3"
                                       autocomplete="off"
                                       @(IsDayChecked("Ср") ? "checked" : "")/>
                                <label class="btn btn-outline-primary" for="btncheck3">Ср</label>

                                <input type="checkbox" class="btn-check" id="btncheck4" autocomplete="off">
                                <label class="btn btn-outline-primary" for="btncheck4">Чт</label>

                                <input type="checkbox" class="btn-check" id="btncheck5" autocomplete="off">
                                <label class="btn btn-outline-primary" for="btncheck5">Пт</label>

                                <input type="checkbox" class="btn-check" id="btncheck6" autocomplete="off">
                                <label class="btn btn-outline-primary" for="btncheck6">Сб</label>

                                <input type="checkbox" class="btn-check" id="btncheck7" autocomplete="off">
                                <label class="btn btn-outline-primary" for="btncheck7">Вс</label>
                            </div>
                        </div>
                    </div>
                }

                <div class="d-flex gap-3">
                    <button type="button"
                            class="btn btn-primary"
                            @onclick="() => SaveChanges(true)">
                        Сохранить изменения
                    </button>

                    <button type="button"
                            class="btn btn-success"
                            @onclick="AddPost">
                        Добавить пост
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="text-bg-primary p-3">Для управления постами запустите бот</div>
        }

@code {
    private Action? _groupRepoChangedHandler;
    private string _botToken = string.Empty;
    private bool _hasError;
    private bool _hasStatus;
    private string _errorMessage = string.Empty;
    private string _statusMessage = string.Empty;
    private List<PostModel> _posts = [];
    private Dictionary<long, string> _groups = new();
    private bool _isDisposed;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _botToken = BotService.GetBotToken();

            await LoadGroups();

            if (BotService.IsBotActive() && !string.IsNullOrWhiteSpace(_botToken))
            {
                _posts = await PostsRepo.GetPostsByBotTokenAsync(_botToken);
            }

            _groupRepoChangedHandler = () => _ = OnGroupRepoChanged();
            GroupRepo.StateChanged += _groupRepoChangedHandler;
        }
        catch (Exception ex)
        {
            HandleError("Ошибка инициализации: " + ex.Message);
        }
    }

    private async Task LoadGroups()
    {
        try
        {
            var groupsResult = await GroupRepo.GetAllGroupsAsync();
            _groups = groupsResult.ToDictionary(g => g.Key, g => g.Value);

            _posts.Where(post => !(post.GroupID is { } groupId && _groups.ContainsKey(groupId)))
                .ToList()
                .ForEach(post => post.GroupID = null);
        }
        catch (Exception ex)
        {
            HandleError("Ошибка загрузки групп: " + ex.Message);
        }
    }

    private string GetGroupName(long? groupId)
    {
        if (groupId == null || groupId == 0)
            return "Выберите канал или группу";

        return _groups.TryGetValue(groupId.Value, out var name)
            ? name
            : "Группа не найдена";
    }

    private async Task ToggleBot()
    {
        _hasError = false;
        _hasStatus = false;

        try
        {
            if (BotService.IsBotActive())
            {
                await BotService.StopBot();
                _posts = await PostsRepo.GetPostsByBotTokenAsync(_botToken);
                ShowStatus("Бот успешно остановлен!");
            }
            else
            {
                if (!ValidateBotToken())
                    return;

                await BotService.StartBot(_botToken);
                ShowStatus("Бот успешно запущен!");
                _posts = await PostsRepo.GetPostsByBotTokenAsync(_botToken);
            }
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
        }
    }

    private bool ValidateBotToken()
    {
        const string pattern = @"^(?:\w+):(?:[\w:]+)";
        if (Regex.IsMatch(_botToken, pattern))
            return true;

        HandleError("Неверный формат токена");
        return false;
    }

    private void SelectGroup(PostModel post, long groupId)
    {
        post.GroupID = groupId;
        StateHasChanged();
    }

    private void AddPost()
    {
        _posts.Add(new PostModel
        {
            Id = Guid.NewGuid(),
            PostText = string.Empty,
            BotID = _botToken,
            PostDateTime = DateTime.Now,
            RepeatDays = 0,
            RepeatHours = 0,
            RepeatMinutes = 0
        });

        StateHasChanged();
    }

    private async Task SaveChanges(bool isNotificationOn)
    {
        try
        {
            await PostsRepo.SavePostChangesAsync(_posts);

            if (isNotificationOn)
                ShowStatus("Изменения успешно сохранены!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении постов: {ex.Message} {ex.InnerException.StackTrace}");
            HandleError("Ошибка сохранения: " + ex.Message);
        }
    }

    private void HandleError(string message)
    {
        _hasError = true;
        _errorMessage = message;
        _hasStatus = false;
        StateHasChanged();
    }

    private void ShowStatus(string message)
    {
        _hasStatus = true;
        _statusMessage = message;
        _hasError = false;
        StateHasChanged();
    }

    private async Task OnGroupRepoChanged()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                await LoadGroups();
                StateHasChanged();
            });
        }
        catch (Exception e)
        {
            Console.WriteLine($"Ошибка в обработчике GroupRepo: {e.Message}");
        }
    }

    public void Dispose()
    {
        if (!_isDisposed && _groupRepoChangedHandler is not null)
        {
            GroupRepo.StateChanged -= _groupRepoChangedHandler;
            _isDisposed = true;
        }
    }

    private Task RemovePost(PostModel post)
    {
        try
        {
            _posts.Remove(post);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Ошибка при удалении поста {e.Message}");
        }

        return Task.CompletedTask;
    }

    private bool IsDayChecked(string day)
    {
        throw new NotImplementedException();
    }

}
