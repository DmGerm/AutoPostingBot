@page "/ChangePassword"
@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using AutoMapper
@using AutoPost_Bot.Models
@using AutoPost_Bot.Users
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject IUsersRepo UsersRepo
@inject IMapper Mapper

<h1>Изменить пароль</h1>

<div class="col-6">
    <div class="mb-3">
        <label for="oldPasswordForm"
            class="form-label"
               @bind="oldPassword">Введите старый пароль
        </label>
        <input type="password" 
            class="form-control" 
            id="oldPasswordForm">
        </div>

        @if(!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" 
                 role="alert">
                @errorMessage
            </div>
        }

        <div class="mb-3">
        <label for="newPasswordForm" class="form-label">Введите новый пароль</label>
            <input type="password"
                   class="form-control @(String.IsNullOrEmpty(errorMessage) ? "": "is-invalid")"
                   id="newPasswordForm"
                   @bind="newPassword"
                   @onblur="PasswordCheck">
        </div>

         <div class="mb-3">
        <label for="newPasswordRepeatForm" 
            class="form-label">Повторите новый пароль</label>
        <input type="password"
               class="form-control @(String.IsNullOrEmpty(errorMessage) ? "" : "is-invalid")"
            id="newPasswordRepeatForm"
               @bind="newPasswordRepeat">
        </div>

    <button class="btn btn-primary" 
            type="submit"
            @onsubmit="OnSubmit"
            >Сохранить</button>
</div>

@code {
    private static readonly string Pattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)\S{8,}$";
    private string errorMessage = string.Empty;
    private string oldPassword = string.Empty;
    private string newPassword = string.Empty;
    private string newPasswordRepeat = string.Empty;
    private UserEditModel? userEditModel;

    private readonly Regex regex = new Regex(Pattern);

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userEmailClaim = user.FindFirst(ClaimTypes.Name)
                                            ?? throw new Exception("User Email can't be null");
        var userEmail = userEmailClaim.Value;
        var userModel = await UsersRepo.FindUserAsync(userEmail)
                                 ?? throw new Exception("User can't be found");

        userEditModel = Mapper.Map<UserEditModel>(userModel);

    }

    private async Task OnSubmit() 
    {
        if (!newPassword.Equals(newPasswordRepeat))
        {
            errorMessage = "Пароли должны совпадать.";
            StateHasChanged();
            return;
        }

        if (userEditModel == null)
            throw new Exception("User can't be null");

        if (string.IsNullOrEmpty(oldPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(newPasswordRepeat))
        {
            errorMessage = "Все поля должны быть заполнены.";
            StateHasChanged();
            return;
        }

         if (await UsersRepo.LoginUserAsync(userEditModel.Email, oldPassword) == null)
         {
             errorMessage = "Неправильный старый пароль."; 
             StateHasChanged();
             return;
         }

        if (string.IsNullOrEmpty(errorMessage))
        {
            try
            {
                if (userEditModel == null)
                    throw new Exception("UserEditModel can't be null.");
                userEditModel.Password = newPassword;
                var user = Mapper.Map<UserModel>(userEditModel);
                await UsersRepo.UpdateUserAsync(user);
         
            }
            catch(Exception ex)
            {
                errorMessage = $"Ошибка при изменении пароля: {ex.Message}";
                StateHasChanged();
                throw;
            }
            errorMessage = "Пароль успешно изменен!";
            StateHasChanged();
        }
    }

    private void PasswordCheck(FocusEventArgs args)
    {
        if (!regex.IsMatch(newPassword))
        {
            errorMessage = "Пароль должен быть не менее 8 символов, содержать заглавную, строчную буквы и цифры.";
            StateHasChanged();
        }
        else
        {
            errorMessage = string.Empty;
        }
    }
}
