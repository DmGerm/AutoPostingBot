@page "/Login"
@using AutoPost_Bot.Models
@using AutoPost_Bot.Users
@rendermode InteractiveServer
@inject IUsersRepo UsersRepo
@inject NavigationManager Navigation

<h3>Войти</h3>

<form @onsubmit="OnLoginClicked">
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">@@</span>
        <input type="text"
               class="form-control @(_isEmailInvalid ? "is-invalid" : "")"
               placeholder="Введите электронную почту"
               aria-label="Username"
               aria-describedby="basic-addon1"
               @bind="_email"
               @onblur="ValidateEmail">
        @if (_isEmailInvalid)
        {
            <div class="invalid-feedback">
                Введите корректный адрес электронной почты.
            </div>
        }
        @if (_isLoginError)
        {
            <div class="invalid-feedback">
                Логин или пароль неверные.
            </div>
        }
    </div>

    <div class="input-group mb-3">
        <input type="password"
               class="form-control"
               placeholder="Введите пароль"
               aria-label="Password"
               aria-describedby="basic-addon1"
               @bind="_password">
    </div>

    <button type="submit" class="btn btn-primary btn-lg">Авторизоваться</button>
</form>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _isEmailInvalid;
    private bool _isLoginError;

    private void ValidateEmail()
    {
        _isEmailInvalid = string.IsNullOrWhiteSpace(_email) || !IsValidEmail(_email);
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task OnLoginClicked()
    {
        ValidateEmail();
        if (_isEmailInvalid)
            return;

        try
        {
            if (!await UsersRepo.IfAnyUsersAsync())
                await UsersRepo.CreateUserAsync(_email, _password, RoleId.Root);

            if (await UsersRepo.LoginUserAsync(_email, _password))
                Navigation.NavigateTo("/");
            else
                _isLoginError = true;
        }
        catch (Exception ex)
        {
            _isLoginError = true;
            Console.WriteLine($"Ошибка при логине: {ex.Message}");
        }
    }
}