@using AutoPost_Bot.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<nav class="navbar navbar-expand-lg bg-body-tertiary mb-2">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Auto-post Bot</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown"
                aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavDropdown">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">На главную</NavLink>
                </li>
                @if (IsAdminOrRoot)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/usersmanager">Управление пользователями</a>
                    </li>
                }
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                       aria-expanded="false">
                        Меню
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/changepassword">Сменить пароль</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/Logout">Выйти</a>
                </li>
            </ul>
        </div>
    </div>
</nav>


@code {
    private RoleId CurrentUserRole = RoleId.User; 
    private bool IsAdminOrRoot => CurrentUserRole == RoleId.Administrator || CurrentUserRole == RoleId.Root;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var roleClaim = user.FindFirst(ClaimTypes.Role);
        if (roleClaim != null && Enum.TryParse<RoleId>(roleClaim.Value, out var role))
        {
            CurrentUserRole = role;
        }
    }
}